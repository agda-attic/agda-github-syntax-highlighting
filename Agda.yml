#
# Syntax highlighting for Agda, used by GitHub
#

scopeName: source.agda
name: Agda
fileTypes:
- agda

patterns:
- # Line comments
  begin: '--'
  end: '$'
  name: comment.line.double-dash.agda
- # Block comments
  begin: '{-[^#]'
  end: '-}'
  name: comment.block.agda
- # Pragmas
  begin: '{-#'
  end: '#-}'
  name: support.other.agda
- # String literals
  begin: '"'
  end: '"'
  name: string.quoted.double.agda
- # Character literals
  match: '''([^\\'']|\\[''\\"[:alnum:]]+)'''
  name: constant.char.agda
- # Numeric literals
  match: '(?<=^|[[:space:]\(\){}])(-?\d+|0x[0-9A-F]+|-?\d+\.\d+((e|E)(\+|-)?\d+)?|-?\d+(e|E)(\+|-)?\d+)(?=[[:space:]\(\){}])'
  name: constant.numeric.agda
- # Names of datatypes/records/modules/constructors
  match: '\b(data|record|module|constructor|open *import|open|import)[[:space:]]+([^;\(\){}@"[:space:]]+)'
  captures:
    '1':
      name: keyword.other.agda
    '2':
      name: entity.name.type.agda
- # Goals
  match: '((?<=^|[.;\(\){}@"[:space:]])\?(?=[.;\(\){}@"[:space:]])|{!.*!})'
  name: entity.name.tag.agda
- # Keywords for universes, like Set₁ etc. Subscripts are not considered parts of words, so \b does not work.
  match: '\b(Set|Prop)[0123456789₀₁₂₃₄₅₆₇₈₉]*(?=$|[[:space:]\(\)\{\}])'
  name: constant.language.agda
- # Same issue with λ, → and ∀.
  match: '(?<=^|[[:space:]\(\)\{\}])(λ|→|->|∀|=|←|:)(?=[[:space:]\(\)\{\}])'
  name: keyword.other.agda
- ### Type declarations
  # In type declarations like "a : Set" or "a b : Set", we want to highlight the "a" and "b".
  # The regexp has to start from the beginning of the line (as we do not want to highlight "a" in "B : (a : A) -> Set", for example),
  # therefore we also have to match possible keywords at the beginning like "postulate a : Set".
  match: '^[[:space:]]*(((abstract|instance|macro|pattern|postulate|primitive|private|syntax|variable|where|let)[[:space:]]+)*)((([^;\(\){}@"[:space:]]+)[[:space:]]+)+)(?=:)'
  captures:
    '1':
      name: keyword.other.agda
    '4':
      name: entity.name.agda
- # Other keywords (did not find how to split a line in YAML without it adding spaces or new lines)
  name: keyword.other.agda
  match: '(?<=^|[[:space:]\(\){}])(abstract|constructor|data|do|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)(?=$|[[:space:]\(\){}])'
